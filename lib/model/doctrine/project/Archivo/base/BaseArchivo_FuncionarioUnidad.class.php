<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Archivo_FuncionarioUnidad', 'doctrine');

/**
 * BaseArchivo_FuncionarioUnidad
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $autorizada_unidad_id
 * @property integer $funcionario_id
 * @property integer $dependencia_unidad_id
 * @property boolean $leer
 * @property boolean $archivar
 * @property boolean $prestar
 * @property boolean $anular
 * @property boolean $administrar
 * @property string $status
 * @property boolean $permitido
 * @property string $permitido_funcionario
 * @property timestamp $deleted_at
 * @property integer $id_update
 * @property string $ip_update
 * @property Organigrama_Unidad $Organigrama_Unidad_ForAutorizadaUnidad
 * @property Organigrama_Unidad $Organigrama_Unidad_ForDependenciaUnidad
 * @property Funcionarios_Funcionario $Funcionarios_Funcionario
 * 
 * @method integer                   getId()                                      Returns the current record's "id" value
 * @method integer                   getAutorizadaUnidadId()                      Returns the current record's "autorizada_unidad_id" value
 * @method integer                   getFuncionarioId()                           Returns the current record's "funcionario_id" value
 * @method integer                   getDependenciaUnidadId()                     Returns the current record's "dependencia_unidad_id" value
 * @method boolean                   getLeer()                                    Returns the current record's "leer" value
 * @method boolean                   getArchivar()                                Returns the current record's "archivar" value
 * @method boolean                   getPrestar()                                 Returns the current record's "prestar" value
 * @method boolean                   getAnular()                                  Returns the current record's "anular" value
 * @method boolean                   getAdministrar()                             Returns the current record's "administrar" value
 * @method string                    getStatus()                                  Returns the current record's "status" value
 * @method boolean                   getPermitido()                               Returns the current record's "permitido" value
 * @method string                    getPermitidoFuncionario()                    Returns the current record's "permitido_funcionario" value
 * @method timestamp                 getDeletedAt()                               Returns the current record's "deleted_at" value
 * @method integer                   getIdUpdate()                                Returns the current record's "id_update" value
 * @method string                    getIpUpdate()                                Returns the current record's "ip_update" value
 * @method Organigrama_Unidad        getOrganigramaUnidadForAutorizadaUnidad()    Returns the current record's "Organigrama_Unidad_ForAutorizadaUnidad" value
 * @method Organigrama_Unidad        getOrganigramaUnidadForDependenciaUnidad()   Returns the current record's "Organigrama_Unidad_ForDependenciaUnidad" value
 * @method Funcionarios_Funcionario  getFuncionariosFuncionario()                 Returns the current record's "Funcionarios_Funcionario" value
 * @method Archivo_FuncionarioUnidad setId()                                      Sets the current record's "id" value
 * @method Archivo_FuncionarioUnidad setAutorizadaUnidadId()                      Sets the current record's "autorizada_unidad_id" value
 * @method Archivo_FuncionarioUnidad setFuncionarioId()                           Sets the current record's "funcionario_id" value
 * @method Archivo_FuncionarioUnidad setDependenciaUnidadId()                     Sets the current record's "dependencia_unidad_id" value
 * @method Archivo_FuncionarioUnidad setLeer()                                    Sets the current record's "leer" value
 * @method Archivo_FuncionarioUnidad setArchivar()                                Sets the current record's "archivar" value
 * @method Archivo_FuncionarioUnidad setPrestar()                                 Sets the current record's "prestar" value
 * @method Archivo_FuncionarioUnidad setAnular()                                  Sets the current record's "anular" value
 * @method Archivo_FuncionarioUnidad setAdministrar()                             Sets the current record's "administrar" value
 * @method Archivo_FuncionarioUnidad setStatus()                                  Sets the current record's "status" value
 * @method Archivo_FuncionarioUnidad setPermitido()                               Sets the current record's "permitido" value
 * @method Archivo_FuncionarioUnidad setPermitidoFuncionario()                    Sets the current record's "permitido_funcionario" value
 * @method Archivo_FuncionarioUnidad setDeletedAt()                               Sets the current record's "deleted_at" value
 * @method Archivo_FuncionarioUnidad setIdUpdate()                                Sets the current record's "id_update" value
 * @method Archivo_FuncionarioUnidad setIpUpdate()                                Sets the current record's "ip_update" value
 * @method Archivo_FuncionarioUnidad setOrganigramaUnidadForAutorizadaUnidad()    Sets the current record's "Organigrama_Unidad_ForAutorizadaUnidad" value
 * @method Archivo_FuncionarioUnidad setOrganigramaUnidadForDependenciaUnidad()   Sets the current record's "Organigrama_Unidad_ForDependenciaUnidad" value
 * @method Archivo_FuncionarioUnidad setFuncionariosFuncionario()                 Sets the current record's "Funcionarios_Funcionario" value
 * 
 * @package    siglas
 * @subpackage model
 * @author     Livio Lopez
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseArchivo_FuncionarioUnidad extends BaseDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('archivo.funcionario_unidad');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'archivo.funcionario_unidad_id',
             'length' => 4,
             ));
        $this->hasColumn('autorizada_unidad_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('funcionario_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('dependencia_unidad_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('leer', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('archivar', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('prestar', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('anular', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('administrar', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('status', 'string', 1, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('permitido', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('permitido_funcionario', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 50,
             ));
        $this->hasColumn('deleted_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('id_update', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('ip_update', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Organigrama_Unidad as Organigrama_Unidad_ForAutorizadaUnidad', array(
             'local' => 'autorizada_unidad_id',
             'foreign' => 'id'));

        $this->hasOne('Organigrama_Unidad as Organigrama_Unidad_ForDependenciaUnidad', array(
             'local' => 'dependencia_unidad_id',
             'foreign' => 'id'));

        $this->hasOne('Funcionarios_Funcionario', array(
             'local' => 'funcionario_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}