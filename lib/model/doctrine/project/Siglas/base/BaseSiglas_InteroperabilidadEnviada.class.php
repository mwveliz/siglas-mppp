<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Siglas_InteroperabilidadEnviada', 'doctrine');

/**
 * BaseSiglas_InteroperabilidadEnviada
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $servidor_confianza_id
 * @property integer $servidor_certificado_id
 * @property integer $interoperabilidad_recibida_id
 * @property string $tipo
 * @property string $parametros
 * @property string $firma
 * @property string $cadena
 * @property integer $paquete
 * @property integer $partes
 * @property integer $parte
 * @property string $status
 * @property integer $id_create
 * @property string $ip_create
 * @property Siglas_ServidorConfianza $Siglas_ServidorConfianza
 * @property Siglas_ServidorCertificado $Siglas_ServidorCertificado
 * @property Doctrine_Collection $Siglas_InteroperabilidadRecibida
 * @property Doctrine_Collection $Correspondencia_Correspondencia
 * 
 * @method integer                         getId()                               Returns the current record's "id" value
 * @method integer                         getServidorConfianzaId()              Returns the current record's "servidor_confianza_id" value
 * @method integer                         getServidorCertificadoId()            Returns the current record's "servidor_certificado_id" value
 * @method integer                         getInteroperabilidadRecibidaId()      Returns the current record's "interoperabilidad_recibida_id" value
 * @method string                          getTipo()                             Returns the current record's "tipo" value
 * @method string                          getParametros()                       Returns the current record's "parametros" value
 * @method string                          getFirma()                            Returns the current record's "firma" value
 * @method string                          getCadena()                           Returns the current record's "cadena" value
 * @method integer                         getPaquete()                          Returns the current record's "paquete" value
 * @method integer                         getPartes()                           Returns the current record's "partes" value
 * @method integer                         getParte()                            Returns the current record's "parte" value
 * @method string                          getStatus()                           Returns the current record's "status" value
 * @method integer                         getIdCreate()                         Returns the current record's "id_create" value
 * @method string                          getIpCreate()                         Returns the current record's "ip_create" value
 * @method Siglas_ServidorConfianza        getSiglasServidorConfianza()          Returns the current record's "Siglas_ServidorConfianza" value
 * @method Siglas_ServidorCertificado      getSiglasServidorCertificado()        Returns the current record's "Siglas_ServidorCertificado" value
 * @method Doctrine_Collection             getSiglasInteroperabilidadRecibida()  Returns the current record's "Siglas_InteroperabilidadRecibida" collection
 * @method Doctrine_Collection             getCorrespondenciaCorrespondencia()   Returns the current record's "Correspondencia_Correspondencia" collection
 * @method Siglas_InteroperabilidadEnviada setId()                               Sets the current record's "id" value
 * @method Siglas_InteroperabilidadEnviada setServidorConfianzaId()              Sets the current record's "servidor_confianza_id" value
 * @method Siglas_InteroperabilidadEnviada setServidorCertificadoId()            Sets the current record's "servidor_certificado_id" value
 * @method Siglas_InteroperabilidadEnviada setInteroperabilidadRecibidaId()      Sets the current record's "interoperabilidad_recibida_id" value
 * @method Siglas_InteroperabilidadEnviada setTipo()                             Sets the current record's "tipo" value
 * @method Siglas_InteroperabilidadEnviada setParametros()                       Sets the current record's "parametros" value
 * @method Siglas_InteroperabilidadEnviada setFirma()                            Sets the current record's "firma" value
 * @method Siglas_InteroperabilidadEnviada setCadena()                           Sets the current record's "cadena" value
 * @method Siglas_InteroperabilidadEnviada setPaquete()                          Sets the current record's "paquete" value
 * @method Siglas_InteroperabilidadEnviada setPartes()                           Sets the current record's "partes" value
 * @method Siglas_InteroperabilidadEnviada setParte()                            Sets the current record's "parte" value
 * @method Siglas_InteroperabilidadEnviada setStatus()                           Sets the current record's "status" value
 * @method Siglas_InteroperabilidadEnviada setIdCreate()                         Sets the current record's "id_create" value
 * @method Siglas_InteroperabilidadEnviada setIpCreate()                         Sets the current record's "ip_create" value
 * @method Siglas_InteroperabilidadEnviada setSiglasServidorConfianza()          Sets the current record's "Siglas_ServidorConfianza" value
 * @method Siglas_InteroperabilidadEnviada setSiglasServidorCertificado()        Sets the current record's "Siglas_ServidorCertificado" value
 * @method Siglas_InteroperabilidadEnviada setSiglasInteroperabilidadRecibida()  Sets the current record's "Siglas_InteroperabilidadRecibida" collection
 * @method Siglas_InteroperabilidadEnviada setCorrespondenciaCorrespondencia()   Sets the current record's "Correspondencia_Correspondencia" collection
 * 
 * @package    siglas
 * @subpackage model
 * @author     Livio Lopez
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSiglas_InteroperabilidadEnviada extends BaseDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('siglas.interoperabilidad_enviada');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'siglas.interoperabilidad_enviada_id',
             'length' => 4,
             ));
        $this->hasColumn('servidor_confianza_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('servidor_certificado_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('interoperabilidad_recibida_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('tipo', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('parametros', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('firma', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('cadena', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('paquete', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('partes', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('parte', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('status', 'string', 1, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('id_create', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('ip_create', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 30,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Siglas_ServidorConfianza', array(
             'local' => 'servidor_confianza_id',
             'foreign' => 'id'));

        $this->hasOne('Siglas_ServidorCertificado', array(
             'local' => 'servidor_certificado_id',
             'foreign' => 'id'));

        $this->hasMany('Siglas_InteroperabilidadRecibida', array(
             'local' => 'id',
             'foreign' => 'interoperabilidad_enviada_id'));

        $this->hasMany('Correspondencia_Correspondencia', array(
             'local' => 'id',
             'foreign' => 'interoperabilidad_enviada_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}