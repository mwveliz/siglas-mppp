<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Siglas_InteroperabilidadRecibida', 'doctrine');

/**
 * BaseSiglas_InteroperabilidadRecibida
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $servidor_confianza_id
 * @property integer $servidor_certificado_id
 * @property integer $interoperabilidad_enviada_id
 * @property string $tipo
 * @property string $parametros
 * @property string $firma
 * @property string $cadena
 * @property integer $paquete
 * @property integer $partes
 * @property integer $parte
 * @property integer $id_create
 * @property string $ip_create
 * @property Siglas_ServidorCertificado $Siglas_ServidorCertificado
 * @property Siglas_ServidorConfianza $Siglas_ServidorConfianza
 * @property Siglas_InteroperabilidadEnviada $Siglas_InteroperabilidadEnviada
 * @property Doctrine_Collection $Correspondencia_Correspondencia
 * 
 * @method integer                          getId()                              Returns the current record's "id" value
 * @method integer                          getServidorConfianzaId()             Returns the current record's "servidor_confianza_id" value
 * @method integer                          getServidorCertificadoId()           Returns the current record's "servidor_certificado_id" value
 * @method integer                          getInteroperabilidadEnviadaId()      Returns the current record's "interoperabilidad_enviada_id" value
 * @method string                           getTipo()                            Returns the current record's "tipo" value
 * @method string                           getParametros()                      Returns the current record's "parametros" value
 * @method string                           getFirma()                           Returns the current record's "firma" value
 * @method string                           getCadena()                          Returns the current record's "cadena" value
 * @method integer                          getPaquete()                         Returns the current record's "paquete" value
 * @method integer                          getPartes()                          Returns the current record's "partes" value
 * @method integer                          getParte()                           Returns the current record's "parte" value
 * @method integer                          getIdCreate()                        Returns the current record's "id_create" value
 * @method string                           getIpCreate()                        Returns the current record's "ip_create" value
 * @method Siglas_ServidorCertificado       getSiglasServidorCertificado()       Returns the current record's "Siglas_ServidorCertificado" value
 * @method Siglas_ServidorConfianza         getSiglasServidorConfianza()         Returns the current record's "Siglas_ServidorConfianza" value
 * @method Siglas_InteroperabilidadEnviada  getSiglasInteroperabilidadEnviada()  Returns the current record's "Siglas_InteroperabilidadEnviada" value
 * @method Doctrine_Collection              getCorrespondenciaCorrespondencia()  Returns the current record's "Correspondencia_Correspondencia" collection
 * @method Siglas_InteroperabilidadRecibida setId()                              Sets the current record's "id" value
 * @method Siglas_InteroperabilidadRecibida setServidorConfianzaId()             Sets the current record's "servidor_confianza_id" value
 * @method Siglas_InteroperabilidadRecibida setServidorCertificadoId()           Sets the current record's "servidor_certificado_id" value
 * @method Siglas_InteroperabilidadRecibida setInteroperabilidadEnviadaId()      Sets the current record's "interoperabilidad_enviada_id" value
 * @method Siglas_InteroperabilidadRecibida setTipo()                            Sets the current record's "tipo" value
 * @method Siglas_InteroperabilidadRecibida setParametros()                      Sets the current record's "parametros" value
 * @method Siglas_InteroperabilidadRecibida setFirma()                           Sets the current record's "firma" value
 * @method Siglas_InteroperabilidadRecibida setCadena()                          Sets the current record's "cadena" value
 * @method Siglas_InteroperabilidadRecibida setPaquete()                         Sets the current record's "paquete" value
 * @method Siglas_InteroperabilidadRecibida setPartes()                          Sets the current record's "partes" value
 * @method Siglas_InteroperabilidadRecibida setParte()                           Sets the current record's "parte" value
 * @method Siglas_InteroperabilidadRecibida setIdCreate()                        Sets the current record's "id_create" value
 * @method Siglas_InteroperabilidadRecibida setIpCreate()                        Sets the current record's "ip_create" value
 * @method Siglas_InteroperabilidadRecibida setSiglasServidorCertificado()       Sets the current record's "Siglas_ServidorCertificado" value
 * @method Siglas_InteroperabilidadRecibida setSiglasServidorConfianza()         Sets the current record's "Siglas_ServidorConfianza" value
 * @method Siglas_InteroperabilidadRecibida setSiglasInteroperabilidadEnviada()  Sets the current record's "Siglas_InteroperabilidadEnviada" value
 * @method Siglas_InteroperabilidadRecibida setCorrespondenciaCorrespondencia()  Sets the current record's "Correspondencia_Correspondencia" collection
 * 
 * @package    siglas
 * @subpackage model
 * @author     Livio Lopez
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSiglas_InteroperabilidadRecibida extends BaseDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('siglas.interoperabilidad_recibida');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'siglas.interoperabilidad_recibida_id',
             'length' => 4,
             ));
        $this->hasColumn('servidor_confianza_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('servidor_certificado_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('interoperabilidad_enviada_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('tipo', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('parametros', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('firma', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('cadena', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('paquete', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('partes', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('parte', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_create', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('ip_create', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 30,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Siglas_ServidorCertificado', array(
             'local' => 'servidor_certificado_id',
             'foreign' => 'id'));

        $this->hasOne('Siglas_ServidorConfianza', array(
             'local' => 'servidor_confianza_id',
             'foreign' => 'id'));

        $this->hasOne('Siglas_InteroperabilidadEnviada', array(
             'local' => 'interoperabilidad_enviada_id',
             'foreign' => 'id'));

        $this->hasMany('Correspondencia_Correspondencia', array(
             'local' => 'id',
             'foreign' => 'interoperabilidad_recibida_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}