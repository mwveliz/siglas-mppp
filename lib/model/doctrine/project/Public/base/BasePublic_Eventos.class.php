<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Public_Eventos', 'doctrine');

/**
 * BasePublic_Eventos
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $unidad_id
 * @property integer $cargo_id
 * @property integer $funcionario_id
 * @property string $titulo
 * @property timestamp $f_inicio
 * @property timestamp $f_final
 * @property integer $motivo_id
 * @property integer $funcionario_delegado_id
 * @property boolean $dia
 * @property boolean $institucional
 * @property integer $id_update
 * @property string $ip_update
 * @property string $ip_create
 * @property Seguridad_Motivo $Seguridad_Motivo
 * @property Funcionarios_Funcionario $Funcionarios_Funcionario
 * @property Funcionarios_Funcionario $Funcionarios_FuncionarioDelegado
 * @property Organigrama_Unidad $Organigrama_Unidad
 * @property Doctrine_Collection $Public_EventosInvitados
 * 
 * @method integer                  getId()                               Returns the current record's "id" value
 * @method integer                  getUnidadId()                         Returns the current record's "unidad_id" value
 * @method integer                  getCargoId()                          Returns the current record's "cargo_id" value
 * @method integer                  getFuncionarioId()                    Returns the current record's "funcionario_id" value
 * @method string                   getTitulo()                           Returns the current record's "titulo" value
 * @method timestamp                getFInicio()                          Returns the current record's "f_inicio" value
 * @method timestamp                getFFinal()                           Returns the current record's "f_final" value
 * @method integer                  getMotivoId()                         Returns the current record's "motivo_id" value
 * @method integer                  getFuncionarioDelegadoId()            Returns the current record's "funcionario_delegado_id" value
 * @method boolean                  getDia()                              Returns the current record's "dia" value
 * @method boolean                  getInstitucional()                    Returns the current record's "institucional" value
 * @method integer                  getIdUpdate()                         Returns the current record's "id_update" value
 * @method string                   getIpUpdate()                         Returns the current record's "ip_update" value
 * @method string                   getIpCreate()                         Returns the current record's "ip_create" value
 * @method Seguridad_Motivo         getSeguridadMotivo()                  Returns the current record's "Seguridad_Motivo" value
 * @method Funcionarios_Funcionario getFuncionariosFuncionario()          Returns the current record's "Funcionarios_Funcionario" value
 * @method Funcionarios_Funcionario getFuncionariosFuncionarioDelegado()  Returns the current record's "Funcionarios_FuncionarioDelegado" value
 * @method Organigrama_Unidad       getOrganigramaUnidad()                Returns the current record's "Organigrama_Unidad" value
 * @method Doctrine_Collection      getPublicEventosInvitados()           Returns the current record's "Public_EventosInvitados" collection
 * @method Public_Eventos           setId()                               Sets the current record's "id" value
 * @method Public_Eventos           setUnidadId()                         Sets the current record's "unidad_id" value
 * @method Public_Eventos           setCargoId()                          Sets the current record's "cargo_id" value
 * @method Public_Eventos           setFuncionarioId()                    Sets the current record's "funcionario_id" value
 * @method Public_Eventos           setTitulo()                           Sets the current record's "titulo" value
 * @method Public_Eventos           setFInicio()                          Sets the current record's "f_inicio" value
 * @method Public_Eventos           setFFinal()                           Sets the current record's "f_final" value
 * @method Public_Eventos           setMotivoId()                         Sets the current record's "motivo_id" value
 * @method Public_Eventos           setFuncionarioDelegadoId()            Sets the current record's "funcionario_delegado_id" value
 * @method Public_Eventos           setDia()                              Sets the current record's "dia" value
 * @method Public_Eventos           setInstitucional()                    Sets the current record's "institucional" value
 * @method Public_Eventos           setIdUpdate()                         Sets the current record's "id_update" value
 * @method Public_Eventos           setIpUpdate()                         Sets the current record's "ip_update" value
 * @method Public_Eventos           setIpCreate()                         Sets the current record's "ip_create" value
 * @method Public_Eventos           setSeguridadMotivo()                  Sets the current record's "Seguridad_Motivo" value
 * @method Public_Eventos           setFuncionariosFuncionario()          Sets the current record's "Funcionarios_Funcionario" value
 * @method Public_Eventos           setFuncionariosFuncionarioDelegado()  Sets the current record's "Funcionarios_FuncionarioDelegado" value
 * @method Public_Eventos           setOrganigramaUnidad()                Sets the current record's "Organigrama_Unidad" value
 * @method Public_Eventos           setPublicEventosInvitados()           Sets the current record's "Public_EventosInvitados" collection
 * 
 * @package    siglas
 * @subpackage model
 * @author     Livio Lopez
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePublic_Eventos extends BaseDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('public.eventos');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'public.eventos_id',
             'length' => 4,
             ));
        $this->hasColumn('unidad_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('cargo_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('funcionario_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('titulo', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 200,
             ));
        $this->hasColumn('f_inicio', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('f_final', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('motivo_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('funcionario_delegado_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('dia', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('institucional', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('id_update', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('ip_update', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 50,
             ));
        $this->hasColumn('ip_create', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 50,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Seguridad_Motivo', array(
             'local' => 'motivo_id',
             'foreign' => 'id'));

        $this->hasOne('Funcionarios_Funcionario', array(
             'local' => 'funcionario_id',
             'foreign' => 'id'));

        $this->hasOne('Funcionarios_Funcionario as Funcionarios_FuncionarioDelegado', array(
             'local' => 'funcionario_delegado_id',
             'foreign' => 'id'));

        $this->hasOne('Organigrama_Unidad', array(
             'local' => 'unidad_id',
             'foreign' => 'id'));

        $this->hasMany('Public_EventosInvitados', array(
             'local' => 'id',
             'foreign' => 'evento_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}